import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

public class MConverterFX extends Application {

    private TextField valueField;
    private ComboBox<String> fromUnitComboBox;
    private ComboBox<String> toUnitComboBox;
    private Label resultLabel;

    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("Metric Converter");

        GridPane gridPane = new GridPane();
        gridPane.setPadding(new Insets(10));
        gridPane.setHgap(5);
        gridPane.setVgap(5);

        Label valueLabel = new Label("Value:");
        valueField = new TextField();
        gridPane.addRow(0, valueLabel, valueField);

        Label fromLabel = new Label("From:");
        fromUnitComboBox = new ComboBox<>();
        fromUnitComboBox.getItems().addAll("m", "km", "cm", "mm", "in", "ft", "yd", "mi");
        fromUnitComboBox.setValue("m");
        gridPane.addRow(1, fromLabel, fromUnitComboBox);

        Label toLabel = new Label("To:");
        toUnitComboBox = new ComboBox<>();
        toUnitComboBox.getItems().addAll("m", "km", "cm", "mm", "in", "ft", "yd", "mi");
        toUnitComboBox.setValue("m");
        gridPane.addRow(2, toLabel, toUnitComboBox);

        Button convertButton = new Button("Convert");
        convertButton.setOnAction(event -> convert());
        gridPane.addRow(3, convertButton);

        resultLabel = new Label();
        gridPane.addRow(4, resultLabel);

        Scene scene = new Scene(gridPane, 300, 200);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private void convert() {
        try {
            double value = Double.parseDouble(valueField.getText());
            String fromUnit = fromUnitComboBox.getValue();
            String toUnit = toUnitComboBox.getValue();
            double convertedValue = convertLength(value, fromUnit, toUnit);
            resultLabel.setText(String.format("%.2f %s is equal to %.2f %s", value, fromUnit, convertedValue, toUnit));
        } catch (NumberFormatException e) {
            resultLabel.setText("Invalid input. Please enter a valid number.");
        }
    }

    private static double convertLength(double value, String fromUnit, String toUnit) {
        switch (fromUnit) {
            case "m":
                switch (toUnit) {
                    case "km": return value * 0.001;
                    case "cm": return value * 100;
                    case "mm": return value * 1000;
                    case "in": return value * 39.3701;
                    case "ft": return value * 3.28084;
                    case "yd": return value * 1.09361;
                    case "mi": return value * 0.000621371;
                    default: return 0;
                }
            case "km":
                
                break;
            
        }
        return 0;
    }

    public static void main(String[] args) {
        launch(args);
    }
}
